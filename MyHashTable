public class MyHashTable<K, V> {
    private class HashNode<K, V> {
        private K key;
        private V value;
        private HashNode<K, V> next;

        public HashNode(K key, V value) {
            this.key = key;
            this.value = value;
        }

        @Override
        public String toString() {
            return "{" + key + " " + value + "}";
        }
    }

    private HashNode<K, V>[] chainArray;
    private int M = 11;
    private int size;
    public MyHashTable() {
        chainArray = new HashNode[M];
        size = 0;
    }

    public MyHashTable(int M) {
        chainArray = new HashNode[M];
        this.M = M;
        size = 0;
    }
    private int hash(K key) {
        return key.hashCode() % M;
    }

    public void put(K key, V value) {
        int index = hash(key);
        HashNode<K, V> newNode = new HashNode<>(key, value);

        if (chainArray[index] == null) {
            chainArray[index] = newNode;
        } else {
            HashNode<K, V> currNode = chainArray[index];
            HashNode<K, V> prevNode = null;

            while (currNode != null) {
                if (currNode.key.equals(key)) {
                    currNode.value = value;
                    return;
                }
                prevNode = currNode;
                currNode = currNode.next;
            }

            prevNode.next = newNode;
        }

        size++;
    }
    public V get(K key) {
        int index = hash(key);

        HashNode<K, V> currNode = chainArray[index];
        while (currNode != null) {
            if (currNode.key.equals(key)) {
                return currNode.value;
            }
            currNode = currNode.next;
        }

        return null;
    }

public boolean contains(V value) {
        for (HashNode<K, V> node : chainArray) {
            HashNode<K, V> currNode = node;
            while (currNode != null) {
                if (currNode.value.equals(value)) {
                    return true;
                }
                currNode = currNode.next;
            }
        }

        return false;
    }
    public K getKey(V value) {
        for (HashNode<K, V> node : chainArray) {
            HashNode<K, V> currNode = node;
            while (currNode != null) {
                if (currNode.value.equals(value)) {
                    return currNode.key;
                }
                currNode = currNode.next;
            }
        }

        return null;
    }
}
